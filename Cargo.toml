[package]
name = "did_webvh"
version = "1.0.0"
edition = "2021"
license = "MIT"
#license-file = "LICENSE.md"
description = "A partial implementation (focusing on resolution) of DID Web + Verifiable History (did:webvh) v1.0 specification"
authors = ["Frithjof Hoppe", "Vladica Stojic", "Marcel Pfeuti"]
homepage = "https://github.com/swiyu-admin-ch/did-webvh"
repository = "https://github.com/swiyu-admin-ch/did-webvh"
readme = "README.md"
include = [
    "Cargo.toml",
    "README.md",
    "src/**/*",
]
keywords = ["did", "webvh"]
categories = ["cryptography"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
uniffi = { version = "0.29.4", features = ["cli"] }
serde = { version = "1.0.219", features = ["derive"] }
serde_json = { version = "1.0.143", features = ["preserve_order"] }
chrono = { version = "0.4.41", features = ["serde"] }
rand = "0.8.5"
hex = "0.4.3"
regex = "1.11.2"
url-escape = "0.1.1"
thiserror = "2.0.16"
url = "2.5.4"
rust-embed = { version = "8.7.2" , features = ["include-exclude", "compression"]}
rayon = "1.11.0"
lazy_static = "1.5.0"
did_sidekicks = { git = "https://github.com/swiyu-admin-ch/did-sidekicks.git", tag = "1.0.0" }
#did_sidekicks = { path = "../did-sidekicks" }

[build-dependencies]
uniffi = { version = "0.29.4", features = ["build"] }

[dev-dependencies]
rstest = "0.26.1"
criterion = "0.7.0"

[[bench]]
name = "did_webvh_benchmark"
harness = false

[lib]
crate-type = ["lib", "cdylib", "staticlib"]
name = "did_webvh"
#path = "src/lib.rs" # `cargo readme` command insist on it

[[bin]]
name = "uniffi-bindgen"
path = "uniffi-bindgen.rs"

[lints.clippy]
cargo = { level = "warn", priority = -1 }
multiple_crate_versions = "allow"
complexity = { level = "warn", priority = -1 }
correctness = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }
# TODO pedantic = { level = "warn", priority = -1 }
perf = { level = "warn", priority = -1 }
style = { level = "warn", priority = -1 }
suspicious = { level = "warn", priority = -1 }
restriction = { level = "warn", priority = -1 }
arbitrary_source_item_ordering = "allow"
blanket_clippy_restriction_lints = "allow"
question_mark_used = "allow"
missing_docs_in_private_items = "allow"
redundant_test_prefix = "allow"
# Due to rust_embed::Embed
same_name_method = "allow"
# The following "linting rule relaxations" were predominantly added due to warnings originated in the code generated by UniFFI
absolute_paths = "allow"
implicit_return = "allow"
std_instead_of_core = "allow"
std_instead_of_alloc = "allow"
exhaustive_structs = "allow"
missing_const_for_fn = "allow"