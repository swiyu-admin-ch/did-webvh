// SPDX-License-Identifier: MIT
namespace did_webvh {
};

[External="did_sidekicks"]
typedef struct Jwk;

[External="did_sidekicks"]
typedef enum VerificationType;

[External="did_sidekicks"]
typedef struct VerificationMethod;

// Returned by `WebVerifiableHistory`'s method get_did_doc_obj
[External="did_sidekicks"]
typedef interface DidDoc;

[External="did_sidekicks"]
typedef trait DidLogEntryJsonSchema;

[External="did_sidekicks"]
typedef enum DidLogEntryValidatorError;

[External="did_sidekicks"]
typedef struct DidLogEntryValidator;

/// The error accompanying WebVerifiableHistoryId.
/// It might occur while calling WebVerifiableHistoryId methods.
[Error]
enum WebVerifiableHistoryIdResolutionError {
    /// DID method is not supported by this resolver.
    "MethodNotSupported",
    /// Invalid method-specific identifier.
    "InvalidMethodSpecificId"
};

/// Represents a DID WEBVH, as specified at https://identity.foundation/didwebvh/v1.0/#method-specific-identifier:
///
/// "The did:webvh method-specific identifier contains both the self-certifying identifier (SCID) for the DID,
/// and a fully qualified domain name (with an optional path) that is secured by a TLS/SSL certificate."
interface WebVerifiableHistoryId {
    /// The only (non-empty) constructor in charge of DID parsing.
    ///
    /// CAUTION Calling any of the available getters should take place after this method is called, not earlier.
    [Name=parse_did_webvh, Throws=WebVerifiableHistoryIdResolutionError]
    constructor(string did_webvh);
    /// Returns the SCID part from the supplied DID.
    string get_scid();
    /// Returns the url part from the supplied DID WEBVH.
    string get_url();
};

/// The error accompanying `WebVerifiableHistory`.
/// It might occur while calling some of the `WebVerifiableHistory` constructors/methods.
[Error]
enum WebVerifiableHistoryError {
    /// DID method is not supported by this resolver.
    "MethodNotSupported",
    /// Invalid method-specific identifier.
    "InvalidMethodSpecificId",
    /// Failed to serialize DID document (to JSON).
    "SerializationFailed",
    /// The supplied did doc is invalid or contains an argument which isn't part of the did specification/recommendation.
    "DeserializationFailed",
    /// Invalid (or not yet supported) operation against DID doc.
    "InvalidOperation",
    /// Invalid DID parameter.
    "InvalidDidParameter",
    /// Invalid DID document.
    "InvalidDidDocument",
    /// Invalid DID log integration proof.
    "InvalidDataIntegrityProof"
};

/// The container for any *valid* `did:webvh` DID log in terms of the
/// Read (Resolve) DID method operation (for a `did:webvh` DID),
/// as specified by https://identity.foundation/didwebvh/v1.0/#read-resolve
interface WebVerifiableHistory {
    /// The single constructor of `WebVerifiableHistory` implementing the
    /// "Read (Resolve) DID method operation" (for a `did:webvh` DID), as specified by https://identity.foundation/didwebvh/v1.0/#read-resolve
    ///
    /// In case of error/exception, all the detailed information required to narrow down the root cause are available as well.
    [Name=read, Throws=WebVerifiableHistoryError]
    constructor(string did_webvh, string did_log);
    /// Delivers the fully qualified DID identifier of the DID log previously resolved in the constructor
    string get_did();
    /// Delivers the very same DID log previously resolved in the constructor
    string get_did_log();
    /// Delivers the fully qualified DID document (as `String`) contained within the DID log previously resolved in the constructor
    string get_did_doc();
    /// Delivers the fully qualified DID document (as `DidDoc`) contained within the DID log previously resolved in the constructor
    [Throws=WebVerifiableHistoryError]
    DidDoc get_did_doc_obj();
};

/// W.r.t. corresponding specification version available at https://identity.foundation/didwebvh
///
/// # CAUTION The single currently supported `didwebvh` specification version is: v1.0
enum WebVerifiableHistoryDidLogEntryJsonSchema {
    /// As defined by https://identity.foundation/didwebvh/v1.0 but w.r.t. (eID-conformity) addendum:
    /// - https://confluence.bit.admin.ch/x/r_0EMw (DID Log Conformity Check)
    /// - https://confluence.bit.admin.ch/x/3e0EMw (DID Doc Conformity Check)
	 "V1_0EidConform",
    /// As (strictly) specified by https://identity.foundation/didwebvh/v1.0
	 "V1_0",
};
